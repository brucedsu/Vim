" ---------------------------- Modeline and Notes ---------------------------- {
" vim: tabstop=4 softtabstop=4 shiftwidth=4 textwidth=80
" vim: foldlevel=0 foldmarker={,} foldmethod=marker
" vim: foldtext=deisufunc#DotVimsFoldText()
"    ____       _ ____                                     __
"   |  _ \  ___(_) ___| _   _       _ __   ___ ___  _ __  / _|
"   | | | |/ _ \ \___ \| | | |_____| '_ \ / __/ _ \| '_ \| |_
"   | |_| |  __/ |___) | |_| |_____| |_) | (_| (_) | | | |  _|
"   |____/ \___|_|____/ \__,_|     | .__/ \___\___/|_| |_|_|
"                                  |_|
"
" DeiSu's personal vim plugins' conf.
" Copyright © 2014-2015 DeiSu. All Rights Reserved.
" }
" --------------------------------- vim-plug --------------------------------- {

nnoremap <Leader>vi :PlugInstall<CR>
nnoremap <Leader>vu :PlugUpdate<CR>
nnoremap <Leader>vs :PlugStatus<CR>

" }
" -------------------------------- ultisnips --------------------------------- {

let g:UltiSnipsExpandTrigger       = "<tab>"
let g:UltiSnipsJumpForwardTrigger  = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<S-tab>"

" }
" ------------------------------ YouCompleteMe ------------------------------- {

let g:ycm_min_num_of_chars_for_completion     = 1
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_always_populate_location_list       = 1
let g:ycm_seed_identifiers_with_syntax        = 1

" preview
let g:ycm_add_preview_to_completeopt                = 0
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion  = 1

" cycle
let g:ycm_key_list_select_completion   = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']

" comment
let g:ycm_complete_in_comments                          = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 1

" extra conf
let g:ycm_confirm_extra_conf = 0
let g:ycm_global_ycm_extra_conf = '~/.vim/plugins/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'

" filetype black/white list
let g:ycm_filetype_blacklist = {
    \ 'tagbar' : 1,
    \ 'qf' : 1,
    \ 'notes' : 1,
    \ 'unite' : 1,
    \ 'text' : 1,
    \ 'vimwiki' : 1,
    \ 'pandoc' : 1,
    \ 'infolog' : 1,
    \ 'mail' : 1
    \}

" }
" ------------------------------ neocomplcache ------------------------------- {

let g:acp_enableAtStartup = 0
let g:neocomplcache_enable_smart_case = 1
let g:neocomplcache_enable_underbar_completion = 1
let g:neocomplcache_min_syntax_length = 3

" enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

" }
" -------------------------------- easymotion -------------------------------- {

nmap \ <Plug>(easymotion-prefix)
nmap <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>W <Plug>(easymotion-bd-W)
nmap <Leader>j <Plug>(easymotion-j)
nmap <Leader>k <Plug>(easymotion-k)

" }
" --------------------------- vim-multiple-cursors --------------------------- {

" by default, match against text instead of word, same behavior as CMD-D in ST3
" discussed at: https://github.com/terryma/vim-multiple-cursors/pull/105
let g:multi_cursor_start_key='<C-n>'
let g:multi_cursor_start_word_key='g<C-n>'

" }
" ---------------------------------- a.vim ----------------------------------- {

nnoremap <Leader>aa :A<CR>
nnoremap <Leader>as :AS<CR>
nnoremap <Leader>av :AV<CR>

" }
" ------------------------------ vim-commentary ------------------------------ {

map  gc  <Plug>Commentary
nmap gcc <Plug>CommentaryLine
nmap <BS> gcc
vmap <BS> gc

" }
" -------------------------------- indentLine -------------------------------- {

let g:indentLine_enabled              = 0
let g:indentLine_char                 = '┆'
let g:indentLine_first_char           = '┆'
let g:indentLine_showFirstIndentLevel = 0
let g:indentLine_faster               = 1
let g:indentLine_fileTypeExclude      = ['sql']

noremap <F5> :IndentLinesToggle<CR>

" }
" --------------------------- rainbow_parentheses ---------------------------- {

nnoremap <F6> :RainbowParentheses!!<CR>

" }
" --------------------------------- undotree --------------------------------- {

let g:undotree_WindowLayout = 2
nnoremap U :UndotreeToggle<CR>

" }
" ------------------------------ vim-easy-align ------------------------------ {

" Start interactive EasyAlign in visual mode
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign with a Vim movement
nmap ga <Plug>(EasyAlign)
nmap gaa ga_

" }
" ------------------------------ vim-unimpaired ------------------------------ {

" text bubbling with unimpaired
nmap <C-Up> [e
nmap <C-Down> ]e
vmap <C-Up> [egv
vmap <C-Down> ]egv

" }
" ------------------------------- python-mode -------------------------------- {

" common functionality
let g:pymode_trim_whitespaces = 0
let g:pymode_options = 0

" PEP8-compatible python ident
let g:pymode_indent = 1

" documentation
let g:pymode_doc = 1
let g:pymode_doc_bind = 'K'

" run code
let g:pymode_run = 1
let g:pymode_run_bind = '<F12>'

" breakpoints
let g:pymode_breakpoint = 1
let g:pymode_breakpoint_bind = '<leader>b'

" code checking: use Syntastic instead
let g:pymode_lint = 0
let g:pymode_lint_checkers = []

" rope support
let g:pymode_rope = 0
let g:pymode_rope_lookup_project = 0

" rope completion
let g:pymode_rope_completion = 0

" }
" --------------------------------- nerdtree --------------------------------- {

let NERDTreeIgnore          = ['\.class$', '\.git', '\.svn', '\.DS_Store', '\.o']
let NERDTreeShowBookmarks   = 1
let NERDTreeShowHidden      = 1
let NERDTreeQuitOnOpen      = 1
let NERDTreeShowLineNumbers = 1
let g:NERDTreeWinSize       = 40
inoremap <F2> <Esc>:NERDTreeToggle<CR>
nnoremap <F2> :NERDTreeToggle<CR>
nnoremap <Leader>f :NERDTreeFind<CR>
nnoremap <Leader>x :NERDTreeCWD<CR>

" }
" ---------------------------------- ctrlp ----------------------------------- {

let g:ctrlp_clear_cache_on_exit = 1
let g:ctrlp_open_multiple_files = 'v'
let g:ctrlp_custom_ignore = {
          \ 'dir':  '\.git$\|\.hg$\|\.svn$',
          \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$\|\.png$\|\.dmg$\|\.jpg$\|\.jpeg$\|\.gif$\|\.pdf$' }
nnoremap <C-p> :CtrlP<CR>
nnoremap <F1> :CtrlPBuffer<CR>

" }
" ---------------------------------- tagbar ---------------------------------- {

let g:tagbar_autofocus = 1
let g:tagbar_sort = 0
let g:tagbar_compact = 1
let g:tagbar_iconchars = ['▸', '▾']
inoremap <F3> :TagbarToggle<CR>
nnoremap <F3> :TagbarToggle<CR>

" }
" -------------------------------- Syntastic --------------------------------- {

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_python_python_exec = '/usr/local/bin/python3.5'
let g:syntastic_python_checkers = ['flake8']

" }
" --------------------------------- fugitive --------------------------------- {

nnoremap <silent> <Leader>gs :Gstatus<CR>
nnoremap <silent> <Leader>gc :Gcommit<CR>
nnoremap <silent> <Leader>gd :Gdiff<CR>
nnoremap <silent> <Leader>gp :Gpush<CR>
nnoremap <silent> <Leader>gl :Glog<CR>
nnoremap <silent> <Leader>gw :Gwrite<CR>
nnoremap <silent> <Leader>gr :Gread<CR>
nnoremap <silent> <Leader>grm :Gremove<CR>
nnoremap <Leader>gm :Gmove<Space>
nnoremap <silent> <Leader>gb :Gblame<CR>
nnoremap <Leader>ga :Git add<Space>
nnoremap <silent> <Leader>ge :Gedit<CR>

" }
" ------------------------------- vim-airline -------------------------------- {

let g:airline#extensions#syntastic#enabled = 0
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme = 'solarized'

" separators
if $TERM_PROGRAM =~ "iTerm" || $TERM =~ "xterm-256color-italic"
    let g:airline_powerline_fonts = 1
else
    let g:airline_left_sep = ''
    let g:airline_right_sep = ''
    let g:airline_section_y = ''
endif

" index
let g:airline#extensions#tabline#buffer_idx_mode = 1
nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9

" }
