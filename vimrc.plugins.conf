" Modeline and Notes {
" vim: ts=4 sts=4 sw=4 tw=80 foldlevel=0 foldmarker={,} foldmethod=marker foldtext=VimConfigFileFoldText()
"    ____       _ ____                                     __
"   |  _ \  ___(_) ___| _   _       _ __   ___ ___  _ __  / _|
"   | | | |/ _ \ \___ \| | | |_____| '_ \ / __/ _ \| '_ \| |_
"   | |_| |  __/ |___) | |_| |_____| |_) | (_| (_) | | | |  _|
"   |____/ \___|_|____/ \__,_|     | .__/ \___\___/|_| |_|_|
"                                  |_|
"
" DeiSu's personal vim plugins' conf.
" Copyright © 2014-2015 DeiSu. All Rights Reserved.
" }

" vim-plug {
    nnoremap <Leader>vi :PlugInstall<CR>
    nnoremap <Leader>vu :PlugUpdate<CR>
    nnoremap <Leader>vs :PlugStatus<CR>
" }

" ultisnips {
    let g:UltiSnipsExpandTrigger       = "<tab>"
    let g:UltiSnipsJumpForwardTrigger  = "<tab>"
    let g:UltiSnipsJumpBackwardTrigger = "<S-tab>"
" }

" YouCompleteMe {
    let g:ycm_min_num_of_chars_for_completion     = 1
    let g:ycm_collect_identifiers_from_tags_files = 1
    let g:ycm_always_populate_location_list       = 1
    let g:ycm_seed_identifiers_with_syntax        = 1

    " preview
    let g:ycm_add_preview_to_completeopt                = 0
    let g:ycm_autoclose_preview_window_after_completion = 1
    let g:ycm_autoclose_preview_window_after_insertion  = 1

    " cycle
    let g:ycm_key_list_select_completion   = ['<C-n>', '<Down>']
    let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']

    " comment
    let g:ycm_complete_in_comments                          = 1
    let g:ycm_collect_identifiers_from_comments_and_strings = 1

    " extra conf
    let g:ycm_confirm_extra_conf = 0
    let g:ycm_global_ycm_extra_conf = '~/.vim/plugins/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
" }

" neocomplcache {
    let g:acp_enableAtStartup = 0
    let g:neocomplcache_enable_smart_case = 1
    let g:neocomplcache_enable_underbar_completion = 1
    let g:neocomplcache_min_syntax_length = 3

    " enable omni completion.
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
    autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
    autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
" }

" easymotion {
    nmap \ <Plug>(easymotion-prefix)
    nmap <Leader>w <Plug>(easymotion-bd-w)
    nmap <Leader>W <Plug>(easymotion-bd-W)
    nmap <Leader>j <Plug>(easymotion-j)
    nmap <Leader>k <Plug>(easymotion-k)
" }

" a.vim {
    nnoremap <Leader>aa :A<CR>
    nnoremap <Leader>as :AS<CR>
    nnoremap <Leader>av :AV<CR>
" }

" vim-commentary {
    map  gc  <Plug>Commentary
    nmap gcc <Plug>CommentaryLine
" }

" indentLine {
    let g:indentLine_enabled              = 0
    let g:indentLine_char                 = '┆'
    let g:indentLine_first_char           = '┆'
    let g:indentLine_showFirstIndentLevel = 0
    let g:indentLine_faster               = 1
    let g:indentLine_fileTypeExclude      = ['sql']

    noremap <Leader>il :IndentLinesToggle<CR>
" }

" undotree {
    let g:undotree_WindowLayout = 2
    nnoremap U :UndotreeToggle<CR>
" }

" vim-easy-align {
    " Start interactive EasyAlign in visual mode
    xmap ga <Plug>(EasyAlign)

    " Start interactive EasyAlign with a Vim movement
    nmap ga <Plug>(EasyAlign)
    nmap gaa ga_
" }

" vim-unimpaired {
    " text bubbling with unimpaired
    nmap <C-Up> [e
    nmap <C-Down> ]e
    vmap <C-Up> [egv
    vmap <C-Down> ]egv
" }

" python-mode {
    if !has('python')
        let g:pymode = 0
    endif

    let g:pymode_doc = 1
    let g:pymode_doc_bind = 'K'
    let g:pymode_run = 0
    let g:pymode_breakpoint = 0
    let g:pymode_lint = 0
    let g:pymode_lint_checkers = ['pyflakes']
    let g:pymode_trim_whitespaces = 0
    let g:pymode_options = 0
    let g:pymode_rope = 0
    let g:pymode_rope_lookup_project = 0
    let g:pymode_rope_completion = 0
" }

" nerdtree {
    let NERDTreeIgnore        = ['\.class$', '\.git', '\.svn', '\.DS_Store', '\.o']
    let NERDTreeShowBookmarks = 1
    let NERDTreeShowHidden    = 1
    let NERDTreeQuitOnOpen    = 1
    nnoremap <Leader>[ :NERDTreeToggle<CR>
    nnoremap <Leader>f :NERDTreeFind<CR>
    nnoremap <Leader>x :NERDTreeCWD<CR>
" }

" ctrlp {
    let g:ctrlp_clear_cache_on_exit = 1
    let g:ctrlp_open_multiple_files = 'v'
    let g:ctrlp_custom_ignore = {
              \ 'dir':  '\.git$\|\.hg$\|\.svn$',
              \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$\|\.png$\|\.dmg$\|\.jpg$\|\.jpeg$\|\.gif$\|\.pdf$' }
    nnoremap <Leader>p :CtrlP<CR>
    nnoremap <Leader>b :CtrlPBuffer<CR>
" }

" tagbar {
    let g:tagbar_autofocus = 1
    let g:tagbar_sort = 0
    let g:tagbar_compact = 1
    let g:tagbar_iconchars = ['▸', '▾']
    nnoremap <Leader>] :TagbarToggle<CR>
    set wildignore+=*/tmp/*,*.so,*.o,*.a,*.obj,*.swp,*.zip,*.pyc,*.pyo,*.class,.DS_Store
" }

" syntastic {
    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_check_on_open = 0
    let g:syntastic_check_on_wq = 0
    let g:syntastic_error_symbol = '✗'
    let g:syntastic_warning_symbol = '⚠'
    let g:syntastic_style_error_symbol = '✠'
    let g:syntastic_style_warning_symbol = '≈'
    let g:syntastic_python_python_exec = '/usr/local/bin/python3.5'
    let g:syntastic_python_checkers = ['pyflakes']
" }

" SingleCompile {
    " nnoremap <F3> :SCCompileRun<CR>
    " inoremap <F3> <esc>:SCCompileRun<CR>
    " nnoremap <F4> :SCCompile<CR>
    " inoremap <F4> :<esc>:SCCompile<CR>
" }

" fugitive {
    nnoremap <silent> <Leader>gs :Gstatus<CR>
    nnoremap <silent> <Leader>gd :Gdiff<CR>
    nnoremap <silent> <Leader>gc :Gcommit<CR>
    nnoremap <silent> <Leader>gp :Gpush<CR>
    nnoremap <silent> <Leader>gl :Glog<CR>
    nnoremap <silent> <Leader>gw :Gwrite<CR>
    nnoremap <silent> <Leader>gr :Gread<CR>
    nnoremap <silent> <Leader>grm :Gremove<CR>
    nnoremap <Leader>gm :Gmove<Space>
    nnoremap <silent> <Leader>gb :Gblame<CR>
    nnoremap <Leader>ga :Git add<Space>
    nnoremap <silent> <Leader>ge :Gedit<CR>
" }

" vim-airline {
    set laststatus=2
    let g:airline#extensions#syntastic#enabled = 0
    let g:airline#extensions#tagbar#enabled    = 1
    let g:airline#extensions#tabline#enabled   = 1
    let g:airline_theme                        = 'solarized'
    let g:airline_powerline_fonts              = 1
    if !exists('g:airline_symbols')
      let g:airline_symbols = {}
    endif
" }

" conque {
    " nnoremap <Leader>tb :ConqueTermVSplit bash<CR>
    " nnoremap <Leader>tz :ConqueTermVSplit zsh<CR>
" }
