extends clang

snippet tmpl "code template" b
#include <iostream>

using namespace std;

int main() {
	${0:cout << "Hello, world!" << endl;}
	return 0;
}
endsnippet

snippet nsstd "using namespace std" b
using namespace std;
endsnippet

snippet cout "cout << string << endl|flush"
cout << ${1:/* string */} << ${0:/* endl|flush */};
endsnippet

snippet coute "cout << string << endl"
cout << ${0:/* string */} << endl;
endsnippet

snippet coutf "cout << string << flush"
cout << ${0:/* string */} << flush;
endsnippet

snippet cls "class ... {public: ... private: ...}" b
class ${1:/* class name */} {
public:
	$1(${2:/* parameters */});
	~$1();

private:
	${3:/* data */}
};

$1::$1($2) {
	${4:/* constructor */}
}

$1::~$1() {${0:/* destructor */ }}
endsnippet

snippet ios "#include <iostream>" b
#include <iostream>
$0
endsnippet
