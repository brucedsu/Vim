extends clang

snippet tmpl "c++ code template" b
#include <iostream>

using namespace std;

int main() {
	${0:cout << "Hello, world!" << endl;}
	return 0;
}
endsnippet

snippet nsstd "using namespace std" b
using namespace std;
endsnippet

snippet cout "cout << string << endl|flush"
cout << ${1:/* string */} << ${0:/* endl|flush */};
endsnippet

snippet coute "cout << string << endl"
cout << ${0:/* string */} << endl;
endsnippet

snippet endl "cout << endl" b
cout << endl;
endsnippet

snippet coutf "cout << string << flush"
cout << ${0:/* string */} << flush;
endsnippet

snippet cls "class ... {public: ... private: ...}" b
class ${1:`!p snip.rv = snip.basename.capitalize()`} {
public:
	$1(${2:/* parameters */}) {
		${3:/* constructor */}
	}

	~$1() {
		${4:/* destructor */}
	}

private:
	${0:/* data */}
};
endsnippet

snippet ios "#include <iostream>" b
#include <iostream>
$0
endsnippet
