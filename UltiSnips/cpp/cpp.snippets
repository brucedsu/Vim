global !p
from snippet_helpers import get_cpp_class_name
endglobal

extends clang

#------------------------------
# Exceptions
#------------------------------
snippet th "throw ..." b
throw ${0:/* expression */};
endsnippet

snippet try "try {...} catch (...) {...}" b
try {
	${1:/* statements */}
} catch (${2:/* catch parameter */}) {
	${0:/* statements */}
}
endsnippet

snippet catch "catch (...) {...}"
catch (${1:/* catch parameter */}) {
	${0:/* statements */}
}
endsnippet

#--------------------
# Libraries
#--------------------
snippet vector "#include <vector>" b
#include <vector>
endsnippet

snippet algo "#include <algorithm>" b
#include <algorithm>
endsnippet

snippet cctype "#include <cctype>" b
#include <cctype>
endsnippet

snippet string "#include <string>" b
#include <string>
endsnippet

snippet sstream "#include <sstream>" b
#include <sstream>
endsnippet

snippet map "#include <map>" b
#include <map>
endsnippet

snippet umap "#include <unordered_map>" b
#include <unordered_map>
endsnippet

snippet set "#include <set>" b
#include <set>
endsnippet

snippet uset "#include <unordered_set>" b
#include <unordered_set>
endsnippet

snippet utility "#include <utility>" b
#include <utility>
endsnippet

snippet cmath "#include <cmath>" b
#include <cmath>
endsnippet

snippet excep "#include <exception>" b
#include <exception>
endsnippet

snippet fstream "#include <fstream>" b
#include <fstream>
endsnippet

snippet list "#include <list>" b
#include <list>
endsnippet

snippet stack "#include <stack>" b
#include <stack>
endsnippet

snippet queue "#include <queue>" b
#include <queue>
endsnippet

#----------
# Loop
#----------
# range for, c++11
snippet rfor "for (... : ...) {...}" b
for (${1:/* declaration */} : ${2:/* expression */}) {
	${0:/* statements */}
}
endsnippet

snippet rfori "for (... : ...) ..." b
for (${1:/* declaration */} : ${2:/* expression */})
	${0:/* statements */}
endsnippet

#-----------------------------
# Code Template
#-----------------------------

snippet tmpl "c++ code template" b
#include <iostream>

using namespace std;

int main() {
	${0:cout << "Hello, world!" << endl;}
	return 0;
}

endsnippet

#---------------------
# Namespace
#---------------------
snippet uns "using namespace ..." b
using namespace ${0:/* namespace name */};
endsnippet

snippet unsstd "using namespace std" b
using namespace std;
endsnippet

snippet ns "namspace ... {...}" b
namespace ${1:/* namespace name */} {
	${0:/* declarations */}
}
endsnippet

#-------------
# Class
#-------------
snippet cls "C++ Class" b
class ${1:`!p snip.rv = get_cpp_class_name(snip.basename)`} {
private:
	${2:/* instance variables */}

public:
	${0:/* public methods */}
};
endsnippet

#------------------
# Function
#------------------
snippet split "vector<string> split(string str, char delimeter)" b
vector<string> split(string str, char delimiter) {
	vector<string> internal;
	stringstream ss(str);
	string token;

	while (getline(ss, token, delimiter)) {
		internal.push_back(token);
	}

	return internal;
}
endsnippet

#------------------
# LeetCode
#------------------
snippet solution "LeetCode solution" b
int main() {
	Solution solution;

	${0:/* tests */}

	return 0;
}
endsnippet

