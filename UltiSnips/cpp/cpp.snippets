global !p
from snippet_helpers import get_class_name
endglobal

extends clang

#--------------------
# Libraries
#--------------------
snippet vector "#include <vector>" b
#include <vector>
endsnippet

snippet algo "#include <algorithm>" b
#include <algorithm>
endsnippet

#----------
# Loop
#----------
# range for, c++11
snippet rfor "for (... : ...) {...}" b
for (${1:/* declaration */} : ${2:/* expression */}) {
	${0:/* statements */}
}
endsnippet

snippet rfori "for (... : ...) ..." b
for (${1:/* declaration */} : ${2:/* expression */})
	${0:/* statements */}
endsnippet

#-----------------------------
# Code Template
#-----------------------------

snippet tmpl "c++ code template" b
#include <iostream>

using namespace std;

int main() {
	${0:cout << "Hello, world!" << endl;}
	return 0;
}
endsnippet

#---------------------
# Namespace
#---------------------
snippet uns "using namespace ..." b
using namespace ${0:/* namespace name */};
endsnippet

snippet unsstd "using namespace std" b
using namespace std;
endsnippet

snippet ns "namspace ... {...}" b
namespace ${1:/* namespace name */} {
	${0:/* declarations */}
}
endsnippet

#-------------
# Class
#-------------
# class declaration and implemetion together
snippet cls "class definition" b
class ${1:`!p snip.rv = get_class_name(snip.basename)`} {
public:
	`!p snip.rv = get_class_name(t[1])`(${2:/* parameters */}) {${3:/* constructor */}}

	~`!p snip.rv = get_class_name(t[1])`() {${4:/* destructor */}}

private:
	${0:/* instance variables */}
};
endsnippet

snippet clsd "class declaration" b
class ${1:`!p snip.rv = get_class_name(snip.basename)`} {
public:
	$1(${2:/* parameters */});
	~$1();

private:
	${0:/* instance variables */}
};
endsnippet
