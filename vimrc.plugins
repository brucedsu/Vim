" ---------------------------- Modeline and Notes ---------------------------- {
" vim: tabstop=4 softtabstop=4 shiftwidth=4 textwidth=80
" vim: foldlevel=0 foldmarker={,} foldmethod=marker
" vim: foldtext=deisufunc#DotVimsFoldText()
"    ____       _ ____                    _             _
"   |  _ \  ___(_) ___| _   _       _ __ | |_   _  __ _(_)_ __  ___
"   | | | |/ _ \ \___ \| | | |_____| '_ \| | | | |/ _` | | '_ \/ __|
"   | |_| |  __/ |___) | |_| |_____| |_) | | |_| | (_| | | | | \__ \
"   |____/ \___|_|____/ \__,_|     | .__/|_|\__,_|\__, |_|_| |_|___/
"                                  |_|            |___/
"
" DeiSu's personal vim plugins.
" I use vim-plug as my plugin manager.
" Copyright Â© 2014-2015 DeiSu. All Rights Reserved.
" }
" --------------------------------- vim-plug --------------------------------- {

" automatically install vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin('~/.vim/plugins')

" }
" -------------------------------- Completion -------------------------------- {

Plug 'jiangmiao/auto-pairs'
Plug 'SirVer/ultisnips', { 'on': [] }
Plug 'Valloric/YouCompleteMe', { 'on': [], 'do': function('deisufunc#YCMInstall') }
Plug 'Shougo/neocomplcache.vim', { 'on': [] }

" UltiSnips is the default snippets engine
" ycm is the first choice for code completion,
" use neocomplcache as a backup
augroup load_completer
    autocmd!
    autocmd! InsertEnter * call plug#load('ultisnips', 'YouCompleteMe')
                        \| if exists('g:loaded_youcompleteme')
                        \|     call youcompleteme#Enable()
                        \| else
                        \|     call plug#load('neocomplcache.vim')
                        \|     exec "NeoComplCacheEnable"
                        \| endif
                        \| autocmd! load_completer
augroup END

" }
" -------------------------------- Navigation -------------------------------- {

Plug 'easymotion/vim-easymotion', { 'on': [
    \ '<Plug>(easymotion-bd-w)',
    \ '<Plug>(easymotion-bd-W)',
    \ '<Plug>(easymotion-j)',
    \ '<Plug>(easymotion-k)'] }
if v:version >= 703
    Plug 'myusuf3/numbers.vim'
endif
Plug 'nelstrom/vim-visual-star-search'
Plug 'brucedsu/a.vim', { 'for': ['cpp', 'c'] }
Plug 'Valloric/ListToggle'
if executable('ag') || executable('ack')
    Plug 'dyng/ctrlsf.vim', { 'on': ['<Plug>CtrlSFPrompt', '<Plug>CtrlSFVwordPath',
        \ '<Plug>CtrlSFVwordExec', '<Plug>CtrlSFCwordPath', '<Plug>CtrlSFPwordPath',
        \ 'CtrlSFOpen', 'CtrlSFToggle' ] }
endif

" }
" --------------------------------- Editing ---------------------------------- {

Plug 'tpope/vim-commentary', { 'on': '<Plug>Commentary' }
Plug 'Yggdroot/indentLine', { 'on': ['IndentLinesEnable', 'IndentLinesToggle'] }
Plug 'tpope/vim-surround'
Plug 'tpope/vim-ragtag'
Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-repeat'
Plug 'Valloric/MatchTagAlways'
Plug 'junegunn/rainbow_parentheses.vim', { 'on': 'RainbowParentheses' }
Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' }

" }
" --------------------------------- Refactor --------------------------------- {

Plug 'junegunn/vim-easy-align', { 'on': ['<Plug>(EasyAlign)', 'EasyAlign'] }
Plug 'tpope/vim-unimpaired'
Plug 'terryma/vim-multiple-cursors'
Plug 'Chiel92/vim-autoformat', { 'on': 'Autoformat' }

" }
" -------------------------------- Languages --------------------------------- {

" Swift
Plug 'keith/swift.vim', { 'for': 'swift' }

" Python
Plug 'klen/python-mode', { 'for': 'python' }

" Markdown
Plug 'nelstrom/vim-markdown-folding', { 'for': ['markdown', 'md'] }
Plug 'tpope/vim-markdown', { 'for': ['markdown', 'md'] }
if executable('redcarpet') && executable('instant-markdown-d')
    Plug 'suan/vim-instant-markdown', { 'for': ['markdown', 'md'] }
endif
Plug 'jszakmeister/markdown2ctags', { 'for': ['markdown', 'md']}

" }
" ------------------------- Front End Web Development -------------------------{

Plug 'mattn/emmet-vim', { 'for': ['html', 'css'] }

" HTML
Plug 'othree/html5.vim', { 'for': 'html' }

" JavaScript
Plug 'elzr/vim-json', { 'for': 'json' }
Plug 'pangloss/vim-javascript', { 'for': ['javascript', 'html'] }
Plug 'othree/javascript-libraries-syntax.vim', { 'for': ['javascript', 'html'] }

" }
" ----------------------------------- IDE ------------------------------------ {

Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind'] }
Plug 'ctrlpvim/ctrlp.vim', { 'on': ['CtrlP', 'CtrlPBuffer']}
if executable('ctags')
    Plug 'majutsushi/tagbar'
endif
Plug 'scrooloose/syntastic', { 'for': ['python', 'javascript', 'html', 'css'] }
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'bling/vim-airline'

" }
" -------------------------------- Utilities --------------------------------- {

Plug 'Shougo/vimproc.vim', { 'do': 'make', 'on': 'VimShell' }
            \| Plug 'Shougo/vimshell.vim', { 'on': 'VimShell' }

" }
" ---------------------------------- Colors ---------------------------------- {

" only use solarized
" favorite color
Plug 'altercation/vim-colors-solarized'

" }
" ---------------------------------- Local ----------------------------------- {

if filereadable(expand("~/.vim.plugins.local"))
    source ~/.vim.plugins.local
endif

" }
" --------------------------------- Cleanup ---------------------------------- {

call plug#end()

" }
